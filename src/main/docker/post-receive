#!/bin/bash

# Copyright (C) 2016 Max Planck Institute for Psycholinguistics
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

# @since May 11, 2016 5:08:41 PM (creation date)
# @author Peter Withers <peter.withers@mpi.nl>


#echo "<h2>push event</h2>" >> $targetDir/git-push-log.html

cd $(dirname "$0")
scriptDir=ScriptsDirectory
targetDir=TargetDirectory
checkoutDir=CheckoutDirectory/RepositoryName
ls -l $targetDir
ls -l $checkoutDir

whoami >> $targetDir/git-update-log.txt

echo $GIT_DIR >> $targetDir/git-update-log.txt
#pwd >> $targetDir/git-update-log.txt
#ls -l  >> $targetDir/git-update-log.txt

unset GIT_DIR

cd $checkoutDir

pwd
git reset --hard >> $targetDir/git-update-log.txt
git pull --depth 5000 >> $targetDir/git-update-log.txt
git status >> $targetDir/git-update-log.txt
pwd >> $targetDir/git-update-log.txt
ls -l  >> $targetDir/git-update-log.txt

while read oldrev newrev ref
do
    echo "$ref $oldrev $newrev <br/>" >> $targetDir/git-push-log.html
    if [ "$oldrev" = "0000000000000000000000000000000000000000" ]; then
      echo "new repository found <br/>" >> $targetDir/git-push-log.html
    else
  #    echo "<br/>" >> $targetDir/git-push-log.html
      #git diff --name-only $oldrev $newrev
      echo "git log -1 : " >> $targetDir/git-push-log.html
      git log -1 --format="%an %ad" >> $targetDir/git-push-log.html
      echo "<br/>" >> $targetDir/git-push-log.html
      git diff --name-only $oldrev $newrev >> $targetDir/git-push-log.html
      # todo: this needs to be limited to XML and JSON
      cp $(git diff --name-only $oldrev $newrev | sed -e "s/[^ ]*\/[^ ]*//g") $scriptDir/incoming/commits/
      # copy the static files to a working directory for frinex-gui to compile
      git diff --name-only $oldrev $newrev | sed -e "s/.json//g" | sed -e "s/.xml//g" >> $targetDir/git-push-log.html
      # only static files in the directory for the commited XML and JSON types are copied here
      # these static files are copied here after the XML or JSON are in place, so that the static files do not get cleaned up before the build starts
      cp -r $(git diff --name-only $oldrev $newrev | sed -e "s/[^ ]*\/[^ ]*//g" | sed -e "s/.json//g" | sed -e "s/.xml//g") $scriptDir/incoming/static/
      chown -R frinex:daemon $scriptDir/incoming
      chmod -R ug+rwx $scriptDir/incoming
      echo "<br/>" >> $targetDir/git-push-log.html
    fi
done

pwd

#echo $JAVA_HOME
#echo $M2_HOME
#echo $M2
#echo $PATH

#which mvn
#mvn -v
node -v

if [ "$(pidof node-default)" ]
then
  pidof node-default
  echo "build in process, exiting";
elif [ "$(pidof node)" ]
then
  pidof node
  echo "build in process, exiting";
else
  echo "starting build process";
  #cd /srv/ExperimentTemplate/
  #rm -rf /srv/development/.m2/nl/mpi/
#  find /srv/development/.m2/repository/ -type d -name *SNAPSHOT
#  find /srv/development/.m2/repository/ -type d -name *SNAPSHOT -delete
  pwd
#  git pull --depth 5000
#  mvn clean install -DversionCheck.buildType=stable -DskipTests=true -gs /srv/development/.m2/settings.xml >> $targetDir/git-mvn-out.html
  nohup nice sudo -u frinex node --use_strict $scriptDir/deploy-by-hook.js >> $targetDir/git-push-out.txt 2>> $targetDir/git-push-err.txt &
  pidof node-default
  pidof node
fi

#echo "node done"
